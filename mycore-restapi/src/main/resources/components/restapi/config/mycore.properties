# Properties for RestAPI
# ======================

#usually the request path of the file node servlet
# must end with '/' 
# you may use the following parameters: ${derid} and ${mcrid}
MCR.RestAPI.v1.Files.URL.path=servlets/MCRFileNodeServlet/${derid}/

MCR.RestAPI.v1.Filter.Write.IPs.Pattern=127\\.0\\.0\\.1|::1
MCR.RestAPI.v1.Filter.Read.IPs.Pattern=\\.*

# To filter XML metadata, set these properties with your filter name, class and stylesheet
# MCR.RestAPI.v1.Filter.XML=RestApiXmlFilter
# MCR.ContentTransformer.RestApiXmlFilter.Class=org.mycore.common.content.transformer.MCRXSLTransformer
# MCR.ContentTransformer.RestApiXmlFilter.Stylesheet=xsl/mycoreobject-xml.xsl

MCR.RestAPI.v1.Upload.Directory=%MCR.datadir%/restapi_uploads

MCR.RestAPI.Resource.Packages=org.mycore.restapi.v1
MCR.RestAPI.V2.Resource.Packages=org.mycore.restapi.v2

#example configuration to allow certain Solr fields to be used for retrieving MCRObjectIDs
#MCR.RestAPI.V2.AlternativeIdentifier.Objects.Keys=doi,category,derivates,id
#MCR.RestAPI.V2.AlternativeIdentifier.Derivates.Keys=categeory,derivateOrder

MCR.Jersey.Resource.ApplicationPaths=%MCR.Jersey.Resource.ApplicationPaths%,api

#example configuration to enable content negotiation via file extension (*.json, *.xml)
#MCR.RestAPI.V2.EnableContentNegotiationViaFileExtension=true

MCR.RestAPI.V2.Links.FrontpageURL=receive/{id}

#filter query for /explore endpoint - it is strongly recommended to filter for MyCoRe objects only
#additional filter may be applied -e.g.: +objectKind:mycoreobject +state:published
MCR.RestAPI.V2.Explore.FilterQuery=objectKind:mycoreobject

#payload fields for /explore endpoint
#allow comma-separated list of solr fields which will be included into the response
#e.g.state,derCount,derivates,worldReadable,doi  
MCR.RestAPI.V2.Explore.PayloadFields=state,worldReadable    

/*
 * This file is part of ***  M y C o R e  ***
 * See https://www.mycore.de/ for details.
 *
 * MyCoRe is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * MyCoRe is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with MyCoRe.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.mycore.mods.classification;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.Supplier;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.jdom2.Element;
import org.mycore.common.config.annotation.MCRConfigurationProxy;
import org.mycore.common.config.annotation.MCRInstanceMap;
import org.mycore.common.config.annotation.MCRSentinel;
import org.mycore.common.events.MCREvent;
import org.mycore.common.events.MCREventHandlerBase;
import org.mycore.datamodel.classifications2.MCRCategoryDAO;
import org.mycore.datamodel.classifications2.MCRCategoryDAOFactory;
import org.mycore.datamodel.metadata.MCRObject;
import org.mycore.mods.MCRMODSWrapper;

/**
 * A {@link MCRMODSClassificationMappingEventHandler} maps classifications in MODS documents. To do so,
 * it uses {@link MCRMODSClassificationMapper} instances that each implement a strategy to obtain
 * classifications based on the information present in the MODS document.
 * <p>
 * Obtained classification values are added to the MODS document as <code>classification</code> elements
 * with <code>authorityURI</code> and <code>valueURI</code> attributes corresponding to that value and a
 * descriptive <code>generator</code> attribute whose name is returned alongside the classification value
 * (and expanded by suffix <code>-mycore</code>) by 
 * {@link MCRMODSClassificationMapper#findMappings(MCRCategoryDAO, MCRMODSWrapper)}.
 * <p>
 * The following configuration options are available:
 * <ul>
 * <li> The property suffix {@link MCRMODSClassificationMappingEventHandler#MAPPERS_KEY} can be used to
 * specify the map of mappers to be used.
 * <li> For each mapper, the property suffix {@link MCRSentinel#ENABLED_KEY} can be used to
 * excluded that mapper from the configuration.
 * </ul>
 * Example:
 * <pre><code>
 * [...].Class=org.mycore.mods.classification.MCRClassificationMappingEventHandler
 * [...].Mappers.foo.Class=foo.bar.FooClassificationMapper
 * [...].Mappers.foo.Enabled=true
 * [...].Mappers.foo.Key1=Value1
 * [...].Mappers.foo.Key2=Value2
 * [...].Mappers.bar.Class=foo.bar.BarClassificationMapper
 * [...].Mappers.bar.Enabled=false
 * [...].Mappers.bar.Key1=Value1
 * [...].Mappers.bar.Key2=Value2
 * </code></pre>
 */
@MCRConfigurationProxy(proxyClass = MCRMODSClassificationMappingEventHandler.Factory.class)
public class MCRMODSClassificationMappingEventHandler extends MCREventHandlerBase {

    private static final Logger LOGGER = LogManager.getLogger();

    public static final String MAPPERS_KEY = "Mappers";

    public static final String GENERATOR_SUFFIX = "-mycore";

    public static final String EXISTING_MAPPINGS_XPATH = "mods:classification[contains(@generator, '"
        + GENERATOR_SUFFIX + "')]";

    private final Map<String, MCRMODSClassificationMapper> mappers;

    public MCRMODSClassificationMappingEventHandler(Map<String, MCRMODSClassificationMapper> mappers) {
        this.mappers = new HashMap<>(Objects
            .requireNonNull(mappers, "Mappers must not be null"));
        this.mappers.forEach((name, mapper) -> Objects
            .requireNonNull(mapper, "Mapper " + name + "must not be null"));
    }

    @Override
    protected void handleObjectCreated(MCREvent evt, MCRObject obj) {
        createMapping(obj);
    }

    @Override
    protected void handleObjectUpdated(MCREvent evt, MCRObject obj) {
        createMapping(obj);
    }

    @Override
    protected void handleObjectRepaired(MCREvent evt, MCRObject obj) {
        createMapping(obj);
    }

    /**
     * Creates x-mappings and XPath-mappings for a given object.
     * @param object the {@link MCRObject} to add mappings to
     */
    private void createMapping(MCRObject object) {

        MCRMODSWrapper wrapper = new MCRMODSWrapper(object);
        if (wrapper.getMODS() == null) {
            return;
        }

        // remove all existing classifications generated by mycore
        wrapper.getElements(EXISTING_MAPPINGS_XPATH).forEach(Element::detach);

        LOGGER.info("check mappings for {}", object::getId);
        MCRCategoryDAO dao = MCRCategoryDAOFactory.obtainInstance();

        mappers.forEach((name, mapper) -> {
            LOGGER.info("generate mappings with {} / {}", name, mapper.getClass().getName());
            List<MCRMODSClassificationMapper.Mapping> mappings = mapper.findMappings(dao, wrapper);
            mappings.forEach(mapping -> {
                Element mappedClassification = wrapper.addElement("classification");
                mappedClassification.setAttribute("generator", mapping.generatorName() + GENERATOR_SUFFIX);
                MCRClassMapper.assignCategory(mappedClassification, mapping.categoryId());
            });
        });

        LOGGER.info("checked for mappings");

    }

    public static class Factory implements Supplier<MCRMODSClassificationMappingEventHandler> {

        @MCRInstanceMap(name = MAPPERS_KEY, valueClass = MCRMODSClassificationMapper.class, sentinel = @MCRSentinel)
        public Map<String, MCRMODSClassificationMapper> mappers;

        @Override
        public MCRMODSClassificationMappingEventHandler get() {
            return new MCRMODSClassificationMappingEventHandler(mappers);
        }

    }

}

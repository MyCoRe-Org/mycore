  MCR.Hibernate.Mappings=%MCR.Hibernate.Mappings%,org.mycore.backend.hibernate.tables.MCRFSNODES
  MCR.CLI.Classes.Internal=%MCR.CLI.Classes.Internal%,org.mycore.frontend.cli.MCRIFSCommands,org.mycore.frontend.cli.MCRIFS2Commands

##############################################################################
# Internal Filesystem configuration
##############################################################################

# This is the default. It use the Hibernate class for IFS
  MCR.Persistence.IFS.FileMetadataStore.Class=org.mycore.backend.hibernate.MCRHIBFileMetadataStore

# File content type detection implementation and config file name:
  MCR.IFS.FileContentTypes.DetectorClass=org.mycore.datamodel.ifs.MCRSimpleFCTDetector
  MCR.IFS.FileContentTypes.DefinitionFile=META-INF/resources/FileContentTypes.xml

# File content store selection implementation and config file name:
  MCR.IFS.ContentStoreSelector.Class=org.mycore.datamodel.ifs.MCRSimpleContentStoreSelector
  MCR.IFS.ContentStoreSelector.ConfigFile=ContentStoreSelectionRules.xml

# File metadata cache size, default is 500 files and directories
  MCR.IFS.FileMetadataStore.CacheSize=500

# Sample file content store with ID = IFS2, uses local filesystem
  MCR.IFS.ContentStore.IFS2.Class=org.mycore.datamodel.ifs2.MCRCStoreIFS2
  MCR.IFS.ContentStore.IFS2.BaseDir=%MCR.datadir%/content
  MCR.IFS.ContentStore.IFS2.SlotLayout=4-2-2
  MCR.IFS.ContentStore.IFS2.URI=%MCR.datadir%/content

# If true, XML output of FileNodeServlet directory listing and IFS resolver
# will include additional data of extenders by default.
  MCR.IFS.IncludeAdditionalDataByDefault=false
  
##############################################################################
# Helix Universal Audio-/Video-Streaming Server & File Content Store         #
##############################################################################

# The file content store that holds to files delivered by Helix streaming server:
MCR.IFS.ContentStore.HELIX.Class=org.mycore.backend.filesystem.MCRCStoreVFS

# The directory on the Real Server host where the files are stored:
MCR.IFS.ContentStore.HELIX.URI=%MCR.datadir%/helixstore

# The class that implements the AudioVideoExtender for this store:
MCR.IFS.AVExtender.HELIX.Class=org.mycore.backend.realhelix.MCRAVExtRealHelix

# The base URL of the helix server, via http:
MCR.IFS.AVExtender.HELIX.StreamingServer.BaseURL=http://localhost:8080

# Base URL of Real Server RAM generator mount point,
# MUST end with a slash (/)
MCR.IFS.AVExtender.HELIX.RamGenBaseURL=%MCR.IFS.AVExtender.HELIX.StreamingServer.BaseURL%/ramgen/content/

# Base URL of Helix Server ASX generator mount point,
# MUST end with a slash (/)
MCR.IFS.AVExtender.HELIX.AsxGenBaseURL=%MCR.IFS.AVExtender.HELIX.StreamingServer.BaseURL%/asxgen/content/

# Base URL of Real Server View Source script,
# MUST end with a slash (/)
MCR.IFS.AVExtender.HELIX.ViewSourceBaseURL=%MCR.IFS.AVExtender.HELIX.StreamingServer.BaseURL%/viewsource/template.html?src=/content/

# URL where clients can download the Real Player:
MCR.IFS.AVExtender.HELIX.RealPlayerURL=http://www.real.com/player/index.html

# URL where clients can download Windows Media Player:
MCR.IFS.AVExtender.HELIX.MediaPlayerURL=http://www.microsoft.com/windows/windowsmedia/download/

